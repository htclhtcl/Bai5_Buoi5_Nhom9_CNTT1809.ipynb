#5.3.1
import math

def giai_tsp(graph):
    SO_THANH_PHO = len(graph)
    best_cost = math.inf
    best_path = []

    def dfs(current_city, current_path, current_cost):
        nonlocal best_cost, best_path

        if current_cost >= best_cost:
            return

        if len(current_path) == SO_THANH_PHO:
            cost_to_return = graph[current_city][current_path[0]]
            if cost_to_return != math.inf and (current_cost + cost_to_return) < best_cost:
                best_cost = current_cost + cost_to_return
                best_path = current_path + [current_path[0]]
            return

        for next_city in range(SO_THANH_PHO):
            if next_city != current_city and next_city not in current_path and graph[current_city][next_city] != math.inf:
                dfs(next_city, current_path + [next_city], current_cost + graph[current_city][next_city])

    dfs(0, [0], 0)
    return best_cost, best_path

# --- Ví dụ 1: 3 thành phố ---
graph3 = [
    [math.inf, 10, 15],
    [10, math.inf, 20],
    [15, 20, math.inf]
]
print("\n--- Ví dụ 1: 3 thành phố ---")
print(giai_tsp(graph3))

# --- Ví dụ 2: 5 thành phố ---
graph5 = [
    [math.inf, 20, 30, 10, 11],
    [20, math.inf, 16, 4, 2],
    [30, 16, math.inf, 6, 7],
    [10, 4, 6, math.inf, 12],
    [11, 2, 7, 12, math.inf]
]
print("\n--- Ví dụ 2: 5 thành phố ---")
print(giai_tsp(graph5))

# --- Ví dụ 3: có đường không thể đi (math.inf) ---
graph_inf = [
    [math.inf, 10, math.inf],
    [10, math.inf, 20],
    [math.inf, 20, math.inf]
]
print("\n--- Ví dụ 3: Có chặn đường ---")
print(giai_tsp(graph_inf))

#5.3.2
# Danh sách các vật phẩm: (trọng lượng, giá trị)
VAT_PHAM = [(3, 5), (4, 7), (2, 4), (5, 8), (6, 10)]
# Sức chứa tối đa của túi
SUC_CHUA_TOI_DA = 11 

# Biến toàn cục để lưu trữ giá trị tốt nhất tìm được và lựa chọn tương ứng
GIA_TRI_TOI_DA_HIEN_TAI = 0
LUA_CHON_TOT_NHAT_HIEN_TAI = []

def giai_knapsack_bnbl_don_gian(idx, current_weight, current_value, current_selection):
    """
    Hàm giải bài toán cái túi 0/1 bằng ý tưởng Nhánh cận đơn giản.
    idx: Chỉ số của vật phẩm đang xét (bắt đầu từ 0).
    current_weight: Trọng lượng hiện tại của các vật phẩm đã chọn.
    current_value: Tổng giá trị hiện tại của các vật phẩm đã chọn.
    current_selection: Danh sách các vật phẩm đã chọn cho đến nay.
    """
    global GIA_TRI_TOI_DA_HIEN_TAI, LUA_CHON_TOT_NHAT_HIEN_TAI

    # --- Cắt tỉa (Pruning) ---
    # Nếu trọng lượng hiện tại đã vượt quá sức chứa của túi, nhánh này không hợp lệ
    if current_weight > SUC_CHUA_TOI_DA:
        return

    # Nếu đây là một giải pháp (đã xét hết các vật phẩm)
    # hoặc đây là một giải pháp tiềm năng (chưa vượt quá sức chứa và có thể tốt hơn)
    if current_value > GIA_TRI_TOI_DA_HIEN_TAI:
        GIA_TRI_TOI_DA_HIEN_AI = current_value
        LUA_CHON_TOT_NHAT_HIEN_TAI = list(current_selection) # Cần copy để không bị thay đổi

    # Nếu đã xét hết tất cả vật phẩm, dừng nhánh này
    if idx == len(VAT_PHAM):
        return

    # --- Nhánh (Branching) ---
    # Lấy thông tin vật phẩm hiện tại
    item_weight, item_value = VAT_PHAM[idx]

    # 1. NHÁNH: CHỌN vật phẩm hiện tại
    # Kiểm tra xem có thể chọn vật phẩm này mà không vượt quá sức chứa không
    if current_weight + item_weight <= SUC_CHUA_TOI_DA:
        giai_knapsack_bnbl_don_gian(
            idx + 1, # Xét vật phẩm tiếp theo
            current_weight + item_weight, # Trọng lượng tăng lên
            current_value + item_value,  # Giá trị tăng lên
            current_selection + [VAT_PHAM[idx]] # Thêm vật phẩm vào lựa chọn
        )

    # 2. NHÁNH: KHÔNG CHỌN vật phẩm hiện tại
    # Luôn có thể không chọn một vật phẩm
    # Để đơn giản, không tính cận trên phức tạp ở đây, chỉ dựa vào current_value
    giai_knapsack_bnbl_don_gian(
        idx + 1, # Xét vật phẩm tiếp theo
        current_weight, # Trọng lượng không đổi
        current_value,  # Giá trị không đổi
        current_selection # Lựa chọn không đổi
    )

# Bắt đầu thuật toán từ vật phẩm đầu tiên (chỉ số 0), với túi rỗng
print("--- Giải Bài toán cái túi bằng Nhánh cận (đơn giản) ---")
giai_knapsack_bnbl_don_gian(0, 0, 0, [])

print(f"Sức chứa túi tối đa: {SUC_CHUA_TOI_DA}")
print(f"Các vật phẩm có sẵn: {VAT_PHAM}")
print(f"Tổng giá trị lớn nhất có thể đạt được: {GIA_TRI_TOI_DA_HIEN_TAI}")
print(f"Các vật phẩm được chọn: {LUA_CHON_TOT_NHAT_HIEN_TAI}")
